module emulator.chips.z80.instr.instructions_ddcb;

import emulator.chips.z80.all;

private{
    enum {
        A = "a", B = "b", C = "c", D = "d", E = "e", H = "h", L = "l", IX = "ix",
        RLC = "rlc", RRC = "rrc", RL = "rl", RR = "rr", SLA = "sla", SRA = "sra",
        SRL = "srl", BIT = "bit", RES = "res", SET = "set",
        LBR = "(", RBR = ")", _ = ",",
        PLUS = "+", N = "%02x"
    }
}

__gshared const {
Instruction[256] groupDDCB = [
// row 0
    Instruction(0x00),
    Instruction(0x01),
    Instruction(0x02),
    Instruction(0x03),
    Instruction(0x04),
    Instruction(0x05),
    Instruction(0x06, _rlcr, [RLC, LBR, IX, PLUS, N, RBR]),
    Instruction(0x07),
    Instruction(0x08),
    Instruction(0x09),
    Instruction(0x0a),
    Instruction(0x0b),
    Instruction(0x0c),
    Instruction(0x0d),
    Instruction(0x0e, _rrcr, [RRC, LBR, IX, PLUS, N, RBR]),
    Instruction(0x0f),
// row 1
    Instruction(0x10),
    Instruction(0x11),
    Instruction(0x12),
    Instruction(0x13),
    Instruction(0x14),
    Instruction(0x15),
    Instruction(0x16, _rlr, [RL, LBR, IX, PLUS, N, RBR]),
    Instruction(0x17),
    Instruction(0x18),
    Instruction(0x19),
    Instruction(0x1a),
    Instruction(0x1b),
    Instruction(0x1c),
    Instruction(0x1d),
    Instruction(0x1e, _rrr, [RR, LBR, IX, PLUS, N, RBR]),
    Instruction(0x1f),
// row 2
    Instruction(0x20),
    Instruction(0x21),
    Instruction(0x22),
    Instruction(0x23),
    Instruction(0x24),
    Instruction(0x25),
    Instruction(0x26, _slar, [SLA, LBR, IX, PLUS, N, RBR]),
    Instruction(0x27),
    Instruction(0x28),
    Instruction(0x29),
    Instruction(0x2a),
    Instruction(0x2b),
    Instruction(0x2c),
    Instruction(0x2d),
    Instruction(0x2e, _srar, [SRA, LBR, IX, PLUS, N, RBR]),
    Instruction(0x2f),
// row 3
    Instruction(0x30), // nothing here ? sll
    Instruction(0x31), // nothing here ? sll
    Instruction(0x32), // nothing here ? sll
    Instruction(0x33), // nothing here ? sll
    Instruction(0x34), // nothing here ? sll
    Instruction(0x35), // nothing here ? sll
    Instruction(0x36), // nothing here ? sll
    Instruction(0x37), // nothing here ? sll
    Instruction(0x38),
    Instruction(0x39),
    Instruction(0x3a),
    Instruction(0x3b),
    Instruction(0x3c),
    Instruction(0x3d),
    Instruction(0x3e, _srlr, [SRL, LBR, IX, PLUS, N, RBR]),
    Instruction(0x3f),
// row 4
    Instruction(0x40),
    Instruction(0x41),
    Instruction(0x42),
    Instruction(0x43),
    Instruction(0x44),
    Instruction(0x45),
    Instruction(0x46, _bitr, [BIT, "0", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x47),
    Instruction(0x48),
    Instruction(0x49),
    Instruction(0x4a),
    Instruction(0x4b),
    Instruction(0x4c),
    Instruction(0x4d),
    Instruction(0x4e, _bitr, [BIT, "1", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x4f),
// row 5
    Instruction(0x50),
    Instruction(0x51),
    Instruction(0x52),
    Instruction(0x53),
    Instruction(0x54),
    Instruction(0x55),
    Instruction(0x56, _bitr, [BIT, "2", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x57),
    Instruction(0x58),
    Instruction(0x59),
    Instruction(0x5a),
    Instruction(0x5b),
    Instruction(0x5c),
    Instruction(0x5d),
    Instruction(0x5e, _bitr, [BIT, "3", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x5f),
// row 6
    Instruction(0x60),
    Instruction(0x61),
    Instruction(0x62),
    Instruction(0x63),
    Instruction(0x64),
    Instruction(0x65),
    Instruction(0x66, _bitr, [BIT, "4", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x67),
    Instruction(0x68),
    Instruction(0x69),
    Instruction(0x6a),
    Instruction(0x6b),
    Instruction(0x6c),
    Instruction(0x6d),
    Instruction(0x6e, _bitr, [BIT, "5", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x6f),
// row 7
    Instruction(0x70),
    Instruction(0x71),
    Instruction(0x72),
    Instruction(0x73),
    Instruction(0x74),
    Instruction(0x75),
    Instruction(0x76, _bitr, [BIT, "6", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x77),
    Instruction(0x78),
    Instruction(0x79),
    Instruction(0x7a),
    Instruction(0x7b),
    Instruction(0x7c),
    Instruction(0x7d),
    Instruction(0x7e, _bitr, [BIT, "7", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x7f),
// row 8
    Instruction(0x80),
    Instruction(0x81),
    Instruction(0x82),
    Instruction(0x83),
    Instruction(0x84),
    Instruction(0x85),
    Instruction(0x86, _resr, [RES, "0", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x87),
    Instruction(0x88),
    Instruction(0x89),
    Instruction(0x8a),
    Instruction(0x8b),
    Instruction(0x8c),
    Instruction(0x8d),
    Instruction(0x8e, _resr, [RES, "1", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x8f),
// row 9
    Instruction(0x90),
    Instruction(0x91),
    Instruction(0x92),
    Instruction(0x93),
    Instruction(0x94),
    Instruction(0x95),
    Instruction(0x96, _resr, [RES, "2", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x97),
    Instruction(0x98),
    Instruction(0x99),
    Instruction(0x9a),
    Instruction(0x9b),
    Instruction(0x9c),
    Instruction(0x9d),
    Instruction(0x9e, _resr, [RES, "3", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0x9f),
// row a
    Instruction(0xa0),
    Instruction(0xa1),
    Instruction(0xa2),
    Instruction(0xa3),
    Instruction(0xa4),
    Instruction(0xa5),
    Instruction(0xa6, _resr, [RES, "4", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xa7),
    Instruction(0xa8),
    Instruction(0xa9),
    Instruction(0xaa),
    Instruction(0xab),
    Instruction(0xac),
    Instruction(0xad),
    Instruction(0xae, _resr, [RES, "5", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xaf),
// row b
    Instruction(0xb0),
    Instruction(0xb1),
    Instruction(0xb2),
    Instruction(0xb3),
    Instruction(0xb4),
    Instruction(0xb5),
    Instruction(0xb6, _resr, [RES, "6", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xb7),
    Instruction(0xb8),
    Instruction(0xb9),
    Instruction(0xba),
    Instruction(0xbb),
    Instruction(0xbc),
    Instruction(0xbd),
    Instruction(0xbe, _resr, [RES, "7", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xbf),
// row c
    Instruction(0xc0),
    Instruction(0xc1),
    Instruction(0xc2),
    Instruction(0xc3),
    Instruction(0xc4),
    Instruction(0xc5),
    Instruction(0xc6, _setr, [SET, "0", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xc7),
    Instruction(0xc8),
    Instruction(0xc9),
    Instruction(0xca),
    Instruction(0xcb),
    Instruction(0xcc),
    Instruction(0xcd),
    Instruction(0xce, _setr, [SET, "1", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xcf),
// row d
    Instruction(0xd0),
    Instruction(0xd1),
    Instruction(0xd2),
    Instruction(0xd3),
    Instruction(0xd4),
    Instruction(0xd5),
    Instruction(0xd6, _setr, [SET, "2", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xd7),
    Instruction(0xd8),
    Instruction(0xd9),
    Instruction(0xda),
    Instruction(0xdb),
    Instruction(0xdc),
    Instruction(0xdd),
    Instruction(0xde, _setr, [SET, "3", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xdf),
// row e
    Instruction(0xe0),
    Instruction(0xe1),
    Instruction(0xe2),
    Instruction(0xe3),
    Instruction(0xe4),
    Instruction(0xe5),
    Instruction(0xe6, _setr, [SET, "4", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xe7),
    Instruction(0xe8),
    Instruction(0xe9),
    Instruction(0xea),
    Instruction(0xeb),
    Instruction(0xec),
    Instruction(0xed),
    Instruction(0xee, _setr, [SET, "5", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xef),
// row f
    Instruction(0xf0),
    Instruction(0xf1),
    Instruction(0xf2),
    Instruction(0xf3),
    Instruction(0xf4),
    Instruction(0xf5),
    Instruction(0xf6, _setr, [SET, "6", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xf7),
    Instruction(0xf8),
    Instruction(0xf9),
    Instruction(0xfa),
    Instruction(0xfb),
    Instruction(0xfc),
    Instruction(0xfd),
    Instruction(0xfe, _setr, [SET, "7", _, LBR, IX, PLUS, N, RBR]),
    Instruction(0xff),
];

} // __gshared const