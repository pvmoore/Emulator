module emulator.chips.z80.instr.instructions_fd;

import emulator.chips.z80.all;

/**
 *  Like the primary opcode table but hl is iy and (hl) is (iy + n)
 *
 *  Note on undocumented instructions:
 *      - L is replaced with iyl
 *      - H is replaced with iyh
 */

__gshared const {

private enum {
    A = "a", B = "b", C = "c", D = "d", E = "e", H = "h", L = "l", R = "r", I = "i",
    BC = "bc", DE = "de", HL = "hl", SP = "sp",
    IY = "iy", IYH = "iyh", IYL = "iyl",
    LBR = "(", RBR = ")", _ = ",", N = "%02x", NN = "%04x", PLUS = "+",

    ADD = "add", ADC = "adc", INC = "inc", DEC = "dec", SUB = "sub", SBC = "sbc",
    AND = "and", OR = "or", XOR = "xor", CP = "cp",
    IN = "in", OUT = "out", LD = "ld", IM = "im", PUSH = "push", POP = "pop",
    JP = "jp"
}

Instruction[256] groupFD = [
// row 0
    Instruction(0x00),
    Instruction(0x01),
    Instruction(0x02),
    Instruction(0x03),
    Instruction(0x04),
    Instruction(0x05),
    Instruction(0x06),
    Instruction(0x07),
    Instruction(0x08),
    Instruction(0x09, _addhlss, [ADD, IY, _, BC]),
    Instruction(0x0a),
    Instruction(0x0b),
    Instruction(0x0c),
    Instruction(0x0d),
    Instruction(0x0e),
    Instruction(0x0f),
// row 1
    Instruction(0x10),
    Instruction(0x11),
    Instruction(0x12),
    Instruction(0x13),
    Instruction(0x14),
    Instruction(0x15),
    Instruction(0x16),
    Instruction(0x17),
    Instruction(0x18),
    Instruction(0x19, _addhlss, [ADD, IY, _, DE]),
    Instruction(0x1a),
    Instruction(0x1b),
    Instruction(0x1c),
    Instruction(0x1d),
    Instruction(0x1e),
    Instruction(0x1f),
// row 2
    Instruction(0x20),
    Instruction(0x21, _ldddnn,   [LD, IY, _, NN]),
    Instruction(0x22, _ldnnhl,   [LD, LBR, NN, RBR, _, IY]),
    Instruction(0x23, _incss,    [INC, IY]),
    Instruction(0x24, _incr,     [INC, IYH]),
    Instruction(0x25, _decr,     [DEC, IYH]),
    Instruction(0x26, _ldrn,     [LD, IYH, _, N]),
    Instruction(0x27),
    Instruction(0x28),
    Instruction(0x29, _addhlss,  [ADD, IY, _, IY]),
    Instruction(0x2a, _ldhlnn,   [LD, IY, _, LBR, NN, RBR]),
    Instruction(0x2b, _decss,    [DEC, IY]),
    Instruction(0x2c, _incr,     [INC, IYL]),
    Instruction(0x2d, _decr,     [DEC, IYL]),
    Instruction(0x2e, _ldrn,     [LD, IYL, _, N]),
    Instruction(0x2f),
// row 3
    Instruction(0x30),
    Instruction(0x31),
    Instruction(0x32),
    Instruction(0x33),
    Instruction(0x34, _incr,     [INC, LBR, IY, PLUS, N, RBR]), // inc (ix+d)
    Instruction(0x35, _decr,     [DEC, LBR, IY, PLUS, N, RBR]), // dec (ix+d)
    Instruction(0x36, _ldrn,     [LD, LBR, IY, PLUS, N, RBR, _, N]),
    Instruction(0x37),
    Instruction(0x38),
    Instruction(0x39, _addhlss, [ADD, IY, _, SP]),
    Instruction(0x3a),
    Instruction(0x3b),
    Instruction(0x3c),
    Instruction(0x3d),
    Instruction(0x3e),
    Instruction(0x3f),
// row 4
    Instruction(0x40),
    Instruction(0x41),
    Instruction(0x42),
    Instruction(0x43),
    Instruction(0x44, _ldrr,     [LD, B, _, IYH]),
    Instruction(0x45, _ldrr,     [LD, B, _, IYL]),
    Instruction(0x46, _ldrr,     [LD, B, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x47),
    Instruction(0x48),
    Instruction(0x49),
    Instruction(0x4a),
    Instruction(0x4b),
    Instruction(0x4c, _ldrr,     [LD, C, _, IYH]),
    Instruction(0x4d, _ldrr,     [LD, C, _, IYL]),
    Instruction(0x4e, _ldrr,     [LD, C, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x4f),
// row 5
    Instruction(0x50),
    Instruction(0x51),
    Instruction(0x52),
    Instruction(0x53),
    Instruction(0x54, _ldrr,     [LD, D, _, IYH]),
    Instruction(0x55, _ldrr,     [LD, D, _, IYL]),
    Instruction(0x56, _ldrr,     [LD, D, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x57),
    Instruction(0x58),
    Instruction(0x59),
    Instruction(0x5a),
    Instruction(0x5b),
    Instruction(0x5c, _ldrr,     [LD, E, _, IYH]),
    Instruction(0x5d, _ldrr,     [LD, E, _, IYL]),
    Instruction(0x5e, _ldrr,     [LD, E, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x5f),
// row 6
    Instruction(0x60, _ldrr,     [LD, IYH, _, B]),
    Instruction(0x61, _ldrr,     [LD, IYH, _, C]),
    Instruction(0x62, _ldrr,     [LD, IYH, _, D]),
    Instruction(0x63, _ldrr,     [LD, IYH, _, E]),
    Instruction(0x64, _ldrr,     [LD, IYH, _, IYH]),
    Instruction(0x65, _ldrr,     [LD, IYH, _, IYL]),
    Instruction(0x66, _ldrr,     [LD, H, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x67, _ldrr,     [LD, IYH, _, A]),
    Instruction(0x68, _ldrr,     [LD, IYL, _, B]),
    Instruction(0x69, _ldrr,     [LD, IYL, _, C]),
    Instruction(0x6a, _ldrr,     [LD, IYL, _, D]),
    Instruction(0x6b, _ldrr,     [LD, IYL, _, E]),
    Instruction(0x6c, _ldrr,     [LD, IYL, _, IYH]),
    Instruction(0x6d, _ldrr,     [LD, IYL, _, IYL]),
    Instruction(0x6e, _ldrr,     [LD, L, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x6f, _ldrr,     [LD, IYL, _, A]),
// row 7
    Instruction(0x70, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, B]),
    Instruction(0x71, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, C]),
    Instruction(0x72, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, D]),
    Instruction(0x73, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, E]),
    Instruction(0x74, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, H]),
    Instruction(0x75, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, L]),
    Instruction(0x76),
    Instruction(0x77, _ldrr,     [LD, LBR, IY, PLUS, N, RBR, _, A]),
    Instruction(0x78),
    Instruction(0x79),
    Instruction(0x7a),
    Instruction(0x7b),
    Instruction(0x7c, _ldrr,     [LD, A, _, IYH]),
    Instruction(0x7d, _ldrr,     [LD, A, _, IYL]),
    Instruction(0x7e, _ldrr,     [LD, A, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x7f),
// row 8
    Instruction(0x80),
    Instruction(0x81),
    Instruction(0x82),
    Instruction(0x83),
    Instruction(0x84, _algar,    [ADD, A, _, IYH]),
    Instruction(0x85, _algar,    [ADD, A, _, IYL]),
    Instruction(0x86, _algar,    [ADD, A, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x87),
    Instruction(0x88),
    Instruction(0x89),
    Instruction(0x8a),
    Instruction(0x8b),
    Instruction(0x8c, _algar,    [ADC, A, _, IYH]),
    Instruction(0x8d, _algar,    [ADC, A, _, IYL]),
    Instruction(0x8e, _algar,    [ADC, A, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x8f),
// row 9
    Instruction(0x90),
    Instruction(0x91),
    Instruction(0x92),
    Instruction(0x93),
    Instruction(0x94, _algar,    [SUB, A, _, IYH], [SUB, IYH]),
    Instruction(0x95, _algar,    [SUB, A, _, IYL], [SUB, IYL]),
    Instruction(0x96, _algar,    [SUB, A, _, LBR, IY, PLUS, N, RBR], [SUB, LBR, IY, PLUS, N, RBR]),
    Instruction(0x97),
    Instruction(0x98),
    Instruction(0x99),
    Instruction(0x9a),
    Instruction(0x9b),
    Instruction(0x9c, _algar,    [SBC, A, _, IYH]),
    Instruction(0x9d, _algar,    [SBC, A, _, IYL]),
    Instruction(0x9e, _algar,    [SBC, A, _, LBR, IY, PLUS, N, RBR], [SBC, A, _, LBR, IY, PLUS, N, RBR]),
    Instruction(0x9f),
// row a
    Instruction(0xa0),
    Instruction(0xa1),
    Instruction(0xa2),
    Instruction(0xa3),
    Instruction(0xa4, _algar,    [AND, A, _, IYH], [AND, IYH]),
    Instruction(0xa5, _algar,    [AND, A, _, IYL], [AND, IYL]),
    Instruction(0xa6, _algar,    [AND, A, _, LBR, IY, PLUS, N, RBR], [AND, LBR, IY, PLUS, N, RBR]),
    Instruction(0xa7),
    Instruction(0xa8),
    Instruction(0xa9),
    Instruction(0xaa),
    Instruction(0xab),
    Instruction(0xac, _algar,    [XOR, A, _, IYH], [XOR, IYH]),
    Instruction(0xad, _algar,    [XOR, A, _, IYL], [XOR, IYL]),
    Instruction(0xae, _algar,    [XOR, A, _, LBR, IY, PLUS, N, RBR], [XOR, LBR, IY, PLUS, N, RBR]),
    Instruction(0xaf),
// row b
    Instruction(0xb0),
    Instruction(0xb1),
    Instruction(0xb2),
    Instruction(0xb3),
    Instruction(0xb4, _algar,    [OR, A, _, IYH], [OR, IYH]),
    Instruction(0xb5, _algar,    [OR, A, _, IYL], [OR, IYL]),
    Instruction(0xb6, _algar,    [OR, A, _, LBR, IY, PLUS, N, RBR], [OR, LBR, IY, PLUS, N, RBR]),
    Instruction(0xb7),
    Instruction(0xb8),
    Instruction(0xb9),
    Instruction(0xba),
    Instruction(0xbb),
    Instruction(0xbc, _algar,    [CP, A, _, IYH], [CP, IYH]),
    Instruction(0xbd, _algar,    [CP, A, _, IYL], [CP, IYL]),
    Instruction(0xbe, _algar,    [CP, A, _, LBR, IY, PLUS, N, RBR], [CP, LBR, IY, PLUS, N, RBR]),
    Instruction(0xbf),
// row c
    Instruction(0xc0),
    Instruction(0xc1),
    Instruction(0xc2),
    Instruction(0xc3),
    Instruction(0xc4),
    Instruction(0xc5),
    Instruction(0xc6),
    Instruction(0xc7),
    Instruction(0xc8),
    Instruction(0xc9),
    Instruction(0xca),
    Instruction(0xcb),
    Instruction(0xcc),
    Instruction(0xcd),
    Instruction(0xce),
    Instruction(0xcf),
// row d
    Instruction(0xd0),
    Instruction(0xd1),
    Instruction(0xd2),
    Instruction(0xd3),
    Instruction(0xd4),
    Instruction(0xd5),
    Instruction(0xd6),
    Instruction(0xd7),
    Instruction(0xd8),
    Instruction(0xd9),
    Instruction(0xda),
    Instruction(0xdb),
    Instruction(0xdc),
    Instruction(0xdd),
    Instruction(0xde),
    Instruction(0xdf),
// row e
    Instruction(0xe0),
    Instruction(0xe1, _popqq,     [POP, IY]),
    Instruction(0xe2),
    Instruction(0xe3, _exsphl,    ["ex", LBR, SP, RBR, _, IY]),
    Instruction(0xe4),
    Instruction(0xe5, _pushqq,    [PUSH, IY]),
    Instruction(0xe6),
    Instruction(0xe7),
    Instruction(0xe8),
    Instruction(0xe9, _jphl,      [JP, LBR, IY, RBR]),
    Instruction(0xea),
    Instruction(0xeb),
    Instruction(0xec),
    Instruction(0xed),
    Instruction(0xee),
    Instruction(0xef),
// row f
    Instruction(0xf0),
    Instruction(0xf1),
    Instruction(0xf2),
    Instruction(0xf3),
    Instruction(0xf4),
    Instruction(0xf5),
    Instruction(0xf6),
    Instruction(0xf7),
    Instruction(0xf8),
    Instruction(0xf9, _ldsphl,    [LD, SP, _, IY]),
    Instruction(0xfa),
    Instruction(0xfb),
    Instruction(0xfc),
    Instruction(0xfd),
    Instruction(0xfe),
    Instruction(0xff),
];
}