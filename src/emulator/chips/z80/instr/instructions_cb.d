module emulator.chips.z80.instr.instructions_cb;

import emulator.chips.z80.all;

private{
    enum {
        A = "a", B = "b", C = "c", D = "d", E = "e", H = "h", L = "l", HL = "hl",
        RLC = "rlc", RRC = "rrc", RL = "rl", RR = "rr", SLA = "sla", SRA = "sra",
        SRL = "srl", BIT = "bit", RES = "res", SET = "set",
        LBR = "(", RBR = ")", _ = ",",
    }
}

__gshared const {
Instruction[256] groupCB = [
// row 0
    Instruction(0x00, _rlcr, [RLC, B]),
    Instruction(0x01, _rlcr, [RLC, C]),
    Instruction(0x02, _rlcr, [RLC, D]),
    Instruction(0x03, _rlcr, [RLC, E]),
    Instruction(0x04, _rlcr, [RLC, H]),
    Instruction(0x05, _rlcr, [RLC, L]),
    Instruction(0x06, _rlcr, [RLC, LBR, HL, RBR]),
    Instruction(0x07, _rlcr, [RLC, A]),
    Instruction(0x08, _rrcr, [RRC, B]),
    Instruction(0x09, _rrcr, [RRC, C]),
    Instruction(0x0a, _rrcr, [RRC, D]),
    Instruction(0x0b, _rrcr, [RRC, E]),
    Instruction(0x0c, _rrcr, [RRC, H]),
    Instruction(0x0d, _rrcr, [RRC, L]),
    Instruction(0x0e, _rrcr, [RRC, LBR, HL, RBR]),
    Instruction(0x0f, _rrcr, [RRC, A]),
// row 1
    Instruction(0x10, _rlr, [RL, B]),
    Instruction(0x11, _rlr, [RL, C]),
    Instruction(0x12, _rlr, [RL, D]),
    Instruction(0x13, _rlr, [RL, E]),
    Instruction(0x14, _rlr, [RL, H]),
    Instruction(0x15, _rlr, [RL, L]),
    Instruction(0x16, _rlr, [RL, LBR, HL, RBR]),
    Instruction(0x17, _rlr, [RL, A]),
    Instruction(0x18, _rrr, [RR, B]),
    Instruction(0x19, _rrr, [RR, C]),
    Instruction(0x1a, _rrr, [RR, D]),
    Instruction(0x1b, _rrr, [RR, E]),
    Instruction(0x1c, _rrr, [RR, H]),
    Instruction(0x1d, _rrr, [RR, L]),
    Instruction(0x1e, _rrr, [RR, LBR, HL, RBR]),
    Instruction(0x1f, _rrr, [RR, A]),
// row 2
    Instruction(0x20, _slar, [SLA, B]),
    Instruction(0x21, _slar, [SLA, C]),
    Instruction(0x22, _slar, [SLA, D]),
    Instruction(0x23, _slar, [SLA, E]),
    Instruction(0x24, _slar, [SLA, H]),
    Instruction(0x25, _slar, [SLA, L]),
    Instruction(0x26, _slar, [SLA, LBR, HL, RBR]),
    Instruction(0x27, _slar, [SLA, A]),
    Instruction(0x28, _srar, [SRA, B]),
    Instruction(0x29, _srar, [SRA, C]),
    Instruction(0x2a, _srar, [SRA, D]),
    Instruction(0x2b, _srar, [SRA, E]),
    Instruction(0x2c, _srar, [SRA, H]),
    Instruction(0x2d, _srar, [SRA, L]),
    Instruction(0x2e, _srar, [SRA, LBR, HL, RBR]),
    Instruction(0x2f, _srar, [SRA, A]),
// row 3
    Instruction(0x30), // nothing here ? sll
    Instruction(0x31), // nothing here ? sll
    Instruction(0x32), // nothing here ? sll
    Instruction(0x33), // nothing here ? sll
    Instruction(0x34), // nothing here ? sll
    Instruction(0x35), // nothing here ? sll
    Instruction(0x36), // nothing here ? sll
    Instruction(0x37), // nothing here ? sll
    Instruction(0x38, _srlr, [SRL, B]),
    Instruction(0x39, _srlr, [SRL, C]),
    Instruction(0x3a, _srlr, [SRL, D]),
    Instruction(0x3b, _srlr, [SRL, E]),
    Instruction(0x3c, _srlr, [SRL, H]),
    Instruction(0x3d, _srlr, [SRL, L]),
    Instruction(0x3e, _srlr, [SRL, LBR, HL, RBR]),
    Instruction(0x3f, _srlr, [SRL, A]),
// row 4
    Instruction(0x40, _bitr, [BIT, "0", _, B]),
    Instruction(0x41, _bitr, [BIT, "0", _, C]),
    Instruction(0x42, _bitr, [BIT, "0", _, D]),
    Instruction(0x43, _bitr, [BIT, "0", _, E]),
    Instruction(0x44, _bitr, [BIT, "0", _, H]),
    Instruction(0x45, _bitr, [BIT, "0", _, L]),
    Instruction(0x46, _bitr, [BIT, "0", _, LBR, HL, RBR]),
    Instruction(0x47, _bitr, [BIT, "0", _, A]),
    Instruction(0x48, _bitr, [BIT, "1", _, B]),
    Instruction(0x49, _bitr, [BIT, "1", _, C]),
    Instruction(0x4a, _bitr, [BIT, "1", _, D]),
    Instruction(0x4b, _bitr, [BIT, "1", _, E]),
    Instruction(0x4c, _bitr, [BIT, "1", _, H]),
    Instruction(0x4d, _bitr, [BIT, "1", _, L]),
    Instruction(0x4e, _bitr, [BIT, "1", _, LBR, HL, RBR]),
    Instruction(0x4f, _bitr, [BIT, "1", _, A]),
// row 5
    Instruction(0x50, _bitr, [BIT, "2", _, B]),
    Instruction(0x51, _bitr, [BIT, "2", _, C]),
    Instruction(0x52, _bitr, [BIT, "2", _, D]),
    Instruction(0x53, _bitr, [BIT, "2", _, E]),
    Instruction(0x54, _bitr, [BIT, "2", _, H]),
    Instruction(0x55, _bitr, [BIT, "2", _, L]),
    Instruction(0x56, _bitr, [BIT, "2", _, LBR, HL, RBR]),
    Instruction(0x57, _bitr, [BIT, "2", _, A]),
    Instruction(0x58, _bitr, [BIT, "3", _, B]),
    Instruction(0x59, _bitr, [BIT, "3", _, C]),
    Instruction(0x5a, _bitr, [BIT, "3", _, D]),
    Instruction(0x5b, _bitr, [BIT, "3", _, E]),
    Instruction(0x5c, _bitr, [BIT, "3", _, H]),
    Instruction(0x5d, _bitr, [BIT, "3", _, L]),
    Instruction(0x5e, _bitr, [BIT, "3", _, LBR, HL, RBR]),
    Instruction(0x5f, _bitr, [BIT, "3", _, A]),
// row 6
    Instruction(0x60, _bitr, [BIT, "4", _, B]),
    Instruction(0x61, _bitr, [BIT, "4", _, C]),
    Instruction(0x62, _bitr, [BIT, "4", _, D]),
    Instruction(0x63, _bitr, [BIT, "4", _, E]),
    Instruction(0x64, _bitr, [BIT, "4", _, H]),
    Instruction(0x65, _bitr, [BIT, "4", _, L]),
    Instruction(0x66, _bitr, [BIT, "4", _, LBR, HL, RBR]),
    Instruction(0x67, _bitr, [BIT, "4", _, A]),
    Instruction(0x68, _bitr, [BIT, "5", _, B]),
    Instruction(0x69, _bitr, [BIT, "5", _, C]),
    Instruction(0x6a, _bitr, [BIT, "5", _, D]),
    Instruction(0x6b, _bitr, [BIT, "5", _, E]),
    Instruction(0x6c, _bitr, [BIT, "5", _, H]),
    Instruction(0x6d, _bitr, [BIT, "5", _, L]),
    Instruction(0x6e, _bitr, [BIT, "5", _, LBR, HL, RBR]),
    Instruction(0x6f, _bitr, [BIT, "5", _, A]),
// row 7
    Instruction(0x70, _bitr, [BIT, "6", _, B]),
    Instruction(0x71, _bitr, [BIT, "6", _, C]),
    Instruction(0x72, _bitr, [BIT, "6", _, D]),
    Instruction(0x73, _bitr, [BIT, "6", _, E]),
    Instruction(0x74, _bitr, [BIT, "6", _, H]),
    Instruction(0x75, _bitr, [BIT, "6", _, L]),
    Instruction(0x76, _bitr, [BIT, "6", _, LBR, HL, RBR]),
    Instruction(0x77, _bitr, [BIT, "6", _, A]),
    Instruction(0x78, _bitr, [BIT, "7", _, B]),
    Instruction(0x79, _bitr, [BIT, "7", _, C]),
    Instruction(0x7a, _bitr, [BIT, "7", _, D]),
    Instruction(0x7b, _bitr, [BIT, "7", _, E]),
    Instruction(0x7c, _bitr, [BIT, "7", _, H]),
    Instruction(0x7d, _bitr, [BIT, "7", _, L]),
    Instruction(0x7e, _bitr, [BIT, "7", _, LBR, HL, RBR]),
    Instruction(0x7f, _bitr, [BIT, "7", _, A]),
// row 8
    Instruction(0x80, _resr, [RES, "0", B]),
    Instruction(0x81, _resr, [RES, "0", C]),
    Instruction(0x82, _resr, [RES, "0", D]),
    Instruction(0x83, _resr, [RES, "0", E]),
    Instruction(0x84, _resr, [RES, "0", H]),
    Instruction(0x85, _resr, [RES, "0", L]),
    Instruction(0x86, _resr, [RES, "0", LBR, HL, RBR]),
    Instruction(0x87, _resr, [RES, "0", A]),
    Instruction(0x88, _resr, [RES, "1", B]),
    Instruction(0x89, _resr, [RES, "1", C]),
    Instruction(0x8a, _resr, [RES, "1", D]),
    Instruction(0x8b, _resr, [RES, "1", E]),
    Instruction(0x8c, _resr, [RES, "1", H]),
    Instruction(0x8d, _resr, [RES, "1", L]),
    Instruction(0x8e, _resr, [RES, "1", LBR, HL, RBR]),
    Instruction(0x8f, _resr, [RES, "1", A]),
// row 9
    Instruction(0x90, _resr, [RES, "2", B]),
    Instruction(0x91, _resr, [RES, "2", C]),
    Instruction(0x92, _resr, [RES, "2", D]),
    Instruction(0x93, _resr, [RES, "2", E]),
    Instruction(0x94, _resr, [RES, "2", H]),
    Instruction(0x95, _resr, [RES, "2", L]),
    Instruction(0x96, _resr, [RES, "2", LBR, HL, RBR]),
    Instruction(0x97, _resr, [RES, "2", A]),
    Instruction(0x98, _resr, [RES, "3", B]),
    Instruction(0x99, _resr, [RES, "3", C]),
    Instruction(0x9a, _resr, [RES, "3", D]),
    Instruction(0x9b, _resr, [RES, "3", E]),
    Instruction(0x9c, _resr, [RES, "3", H]),
    Instruction(0x9d, _resr, [RES, "3", L]),
    Instruction(0x9e, _resr, [RES, "3", LBR, HL, RBR]),
    Instruction(0x9f, _resr, [RES, "3", A]),
// row a
    Instruction(0xa0, _resr, [RES, "4", B]),
    Instruction(0xa1, _resr, [RES, "4", C]),
    Instruction(0xa2, _resr, [RES, "4", D]),
    Instruction(0xa3, _resr, [RES, "4", E]),
    Instruction(0xa4, _resr, [RES, "4", H]),
    Instruction(0xa5, _resr, [RES, "4", L]),
    Instruction(0xa6, _resr, [RES, "4", LBR, HL, RBR]),
    Instruction(0xa7, _resr, [RES, "4", A]),
    Instruction(0xa8, _resr, [RES, "5", B]),
    Instruction(0xa9, _resr, [RES, "5", C]),
    Instruction(0xaa, _resr, [RES, "5", D]),
    Instruction(0xab, _resr, [RES, "5", E]),
    Instruction(0xac, _resr, [RES, "5", H]),
    Instruction(0xad, _resr, [RES, "5", L]),
    Instruction(0xae, _resr, [RES, "5", LBR, HL, RBR]),
    Instruction(0xaf, _resr, [RES, "5", A]),
// row b
    Instruction(0xb0, _resr, [RES, "6", B]),
    Instruction(0xb1, _resr, [RES, "6", C]),
    Instruction(0xb2, _resr, [RES, "6", D]),
    Instruction(0xb3, _resr, [RES, "6", E]),
    Instruction(0xb4, _resr, [RES, "6", H]),
    Instruction(0xb5, _resr, [RES, "6", L]),
    Instruction(0xb6, _resr, [RES, "6", LBR, HL, RBR]),
    Instruction(0xb7, _resr, [RES, "6", A]),
    Instruction(0xb8, _resr, [RES, "7", B]),
    Instruction(0xb9, _resr, [RES, "7", C]),
    Instruction(0xba, _resr, [RES, "7", D]),
    Instruction(0xbb, _resr, [RES, "7", E]),
    Instruction(0xbc, _resr, [RES, "7", H]),
    Instruction(0xbd, _resr, [RES, "7", L]),
    Instruction(0xbe, _resr, [RES, "7", LBR, HL, RBR]),
    Instruction(0xbf, _resr, [RES, "7", A]),
// row c
    Instruction(0xc0, _setr, [SET, "0", B]),
    Instruction(0xc1, _setr, [SET, "0", C]),
    Instruction(0xc2, _setr, [SET, "0", D]),
    Instruction(0xc3, _setr, [SET, "0", E]),
    Instruction(0xc4, _setr, [SET, "0", H]),
    Instruction(0xc5, _setr, [SET, "0", L]),
    Instruction(0xc6, _setr, [SET, "0", LBR, HL, RBR]),
    Instruction(0xc7, _setr, [SET, "0", A]),
    Instruction(0xc8, _setr, [SET, "1", B]),
    Instruction(0xc9, _setr, [SET, "1", C]),
    Instruction(0xca, _setr, [SET, "1", D]),
    Instruction(0xcb, _setr, [SET, "1", E]),
    Instruction(0xcc, _setr, [SET, "1", H]),
    Instruction(0xcd, _setr, [SET, "1", L]),
    Instruction(0xce, _setr, [SET, "1", LBR, HL, RBR]),
    Instruction(0xcf, _setr, [SET, "1", A]),
// row d
    Instruction(0xd0, _setr, [SET, "2", B]),
    Instruction(0xd1, _setr, [SET, "2", C]),
    Instruction(0xd2, _setr, [SET, "2", D]),
    Instruction(0xd3, _setr, [SET, "2", E]),
    Instruction(0xd4, _setr, [SET, "2", H]),
    Instruction(0xd5, _setr, [SET, "2", L]),
    Instruction(0xd6, _setr, [SET, "2", LBR, HL, RBR]),
    Instruction(0xd7, _setr, [SET, "2", A]),
    Instruction(0xd8, _setr, [SET, "3", B]),
    Instruction(0xd9, _setr, [SET, "3", C]),
    Instruction(0xda, _setr, [SET, "3", D]),
    Instruction(0xdb, _setr, [SET, "3", E]),
    Instruction(0xdc, _setr, [SET, "3", H]),
    Instruction(0xdd, _setr, [SET, "3", L]),
    Instruction(0xde, _setr, [SET, "3", LBR, HL, RBR]),
    Instruction(0xdf, _setr, [SET, "3", A]),
// row e
    Instruction(0xe0, _setr, [SET, "4", B]),
    Instruction(0xe1, _setr, [SET, "4", C]),
    Instruction(0xe2, _setr, [SET, "4", D]),
    Instruction(0xe3, _setr, [SET, "4", E]),
    Instruction(0xe4, _setr, [SET, "4", H]),
    Instruction(0xe5, _setr, [SET, "4", L]),
    Instruction(0xe6, _setr, [SET, "4", LBR, HL, RBR]),
    Instruction(0xe7, _setr, [SET, "4", A]),
    Instruction(0xe8, _setr, [SET, "5", B]),
    Instruction(0xe9, _setr, [SET, "5", C]),
    Instruction(0xea, _setr, [SET, "5", D]),
    Instruction(0xeb, _setr, [SET, "5", E]),
    Instruction(0xec, _setr, [SET, "5", H]),
    Instruction(0xed, _setr, [SET, "5", L]),
    Instruction(0xee, _setr, [SET, "5", LBR, HL, RBR]),
    Instruction(0xef, _setr, [SET, "5", A]),
// row f
    Instruction(0xf0, _setr, [SET, "6", B]),
    Instruction(0xf1, _setr, [SET, "6", C]),
    Instruction(0xf2, _setr, [SET, "6", D]),
    Instruction(0xf3, _setr, [SET, "6", E]),
    Instruction(0xf4, _setr, [SET, "6", H]),
    Instruction(0xf5, _setr, [SET, "6", L]),
    Instruction(0xf6, _setr, [SET, "6", LBR, HL, RBR]),
    Instruction(0xf7, _setr, [SET, "6", A]),
    Instruction(0xf8, _setr, [SET, "7", B]),
    Instruction(0xf9, _setr, [SET, "7", C]),
    Instruction(0xfa, _setr, [SET, "7", D]),
    Instruction(0xfb, _setr, [SET, "7", E]),
    Instruction(0xfc, _setr, [SET, "7", H]),
    Instruction(0xfd, _setr, [SET, "7", L]),
    Instruction(0xfe, _setr, [SET, "7", LBR, HL, RBR]),
    Instruction(0xff, _setr, [SET, "7", A]),
];

} // __gshared const